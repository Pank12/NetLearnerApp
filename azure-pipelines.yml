# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  SolutionPath: 'src/NetLearnerApp.sln.sln'

steps:
# Optional: 'dotnet restore' is not necessary because the 'dotnet build' command executes restore as well.
#- task: DotNetCoreCLI@2
#  displayName: 'Restore dependencies'
#  inputs:
#    command: restore
#    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build web project'
  inputs:
    command: 'build'
    projects: $(SolutionPath)

- task: DotNetCoreCLI@2
  displayName: 'Publish and zip'
  inputs:
    command: publish
    publishWebProjects: False
    projects: $(SolutionPath)
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
- task: DotNetCoreCLI@2
  displayName: 'Publish and zip' 
  inputs:
    command: 'publish'
    publishDirectory: '$(Build.ArtifactStagingDirectory)'
    feedsToUsePublish: 'internal'
    vstsFeedPublish: '4bb2a789-9282-4127-b5dd-3ee8bf0a1524/b7d9ab25-eeed-438d-9a25-9130771fd052'
    vstsFeedPackagePublish: '$(Build.ArtifactStagingDirectory)/**/*.zip'
    versionOption: 'patch'
    
    
# - task: AzureWebApp@1
#   displayName: 'Deploy Azure Web App'
#   inputs:
#     azureSubscription: '<REPLACE_WITH_AZURE_SUBSCRIPTION_INFO>'
#     appName: <REPLACE_WITH_EXISTING_APP_SERVICE_NAME>
#     appType: 'webApp'
#     package: $(Build.ArtifactStagingDirectory)/**/*.zip

# # Optional step if you want to deploy to some other system using a Release pipeline or inspect the package afterwards
# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Build artifacts'
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'drop'
#     publishLocation: 'Container'


